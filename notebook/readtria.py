#!/usr/bin/python3
# Note: Code probably needs to be changed if extra marker are introduced
import numpy as np


def readtria(fname):
    # input: filename
    # output: x,y,npoint,nelement,e2p,idp,ide
    print("read mesh file: " + fname)

    # Node file
    npoint = ndim = npattr = nbound = None
    fname_node = fname + ".node"
    with open(fname_node, "r") as fnode:
        npoint, ndim, npattr, nbound = [
            int(x) for x in fnode.readline().split()]

    U = np.genfromtxt(fname_node, skip_header=1)
    x = U[:, 1]               # dimension
    y = U[:, 2]               # number of point attributes
    idp = U[:, 3].astype(int)  # number of boundary markers

    # Element file
    nelement = nphi = neattr = None
    fname_ele = fname + ".ele"
    with open(fname_ele, "r") as fele:
        nelement, nphi, neattr = [int(x) for x in fele.readline().split()]

    U = np.genfromtxt(fname_ele, skip_header=1, dtype=np.int64)
    e2p = U[:, 1:nphi+1] - 1
    ide = U[:, nphi+1:]

    return x, y, npoint, nelement, e2p, idp, ide

def writevtk(fname,x,y,e2p,u,varname):
    npoint   = np.max(e2p)+1
    nelement = np.size(e2p,0)

    f = open(fname,'w')

    # output header
    f.write('# vtk DataFile Version 2.0\n')
    f.write('triangle mesh generated by Python\n')
    f.write('ASCII\n')

    # create unstructured grid with points
    f.write('DATASET UNSTRUCTURED_GRID\n')
    f.write(f'POINTS {npoint} float\n')
    for i in range(npoint):
        f.write(f'{x[i]} {y[i]} {0}\n')

    # output cell connectivity
    f.write(f'CELLS {nelement} {4*nelement}\n')
    for i in range(nelement):
        f.write(f'3 {e2p[i,0]} {e2p[i,1]} {e2p[i,2]}\n')
        
    # output cell type 10 = tetraeder
    f.write(f'CELL_TYPES {nelement}\n')
    for i in range(nelement):
        f.write('5\n')
    
    f.write(f'POINT_DATA {npoint}\n')
    f.write(f'SCALARS {varname} float 1\n')
    f.write('LOOKUP_TABLE default\n')
    for i in range(npoint):
        f.write(f'{u[i]}\n')
    f.close()
    return
